---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  namespace: core
spec:
  selector:
    matchLabels:
      app: redis
  replicas: 1 # tells deployment to run 2 pods matching the template
  template:
    metadata:
      labels:
        app: redis
    spec:
      volumes:
        - name: redis-data-vol
          persistentVolumeClaim:
            claimName: redis-data-pvc
      containers:
        - name: redis
          image: redis:latest
          args: ["--requirepass", $(REDIS_PASSWORD)]
          ports:
            - containerPort: 6379
          resources:
            limits:
              memory: 256Mi
              cpu: 200m
            requests:
              memory: 256Mi
              cpu: 150m
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis
                  key: REDIS_PASSWORD
          securityContext:
            runAsUser: 10001
            runAsGroup: 10001
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            capabilities:
              drop: ["ALL"]
          volumeMounts:
            - name: redis-data-vol
              mountPath: /data
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
spec:
  selector:
    app: redis
  ports:
    - name: redis
      protocol: TCP
      port: 6379
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data-pvc
spec:
  storageClassName: redis
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Mi
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-pv
  labels:
    type: local
spec:
  storageClassName: redis
  capacity:
    storage: 20Mi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/opt/k0s/redis-data"
